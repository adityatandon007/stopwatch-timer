{"version":3,"sources":["actions.js","reducers.js","store.js","Timer.js","actionCreators.js","App.js","serviceWorker.js","index.js"],"names":["TOGGLE_START_STOP_BUTTON","DEFAULT_STATE","currentHr","currentMin","currentSec","currentMillisec","intervalId","startStopButton","rootReducer","state","arguments","length","undefined","action","type","Object","assign","payload","toggleStartStopButton","store","createStore","Timer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startTimer","stopTimer","_this2","timerInterval","setInterval","ms","setState","sec","min","hr","clearInterval","react_default","a","createElement","className","Timer_TimerDisplay","milliSec","onClick","timerButton","bind","resetTimer","Component","TimerDisplay","toLocaleString","minimumIntegerDigits","useGrouping","connect","dispatch","label","App","src_Timer","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e14b5269.chunk.js","sourcesContent":["export const TOGGLE_START_STOP_BUTTON = \"TOGGLE_START_STOP_BUTTON\";","// creating reducer\n\nimport {TOGGLE_START_STOP_BUTTON} from './actions';\n\nconst DEFAULT_STATE = {\n      currentHr: 0,\n      currentMin: 0,\n      currentSec: 0,\n      currentMillisec: 0,\n      intervalId: '',\n      startStopButton: 'Start',\n}\n\nconst toggleStartStopButton = (state, action) => Object.assign({}, state, { startStopButton: action.payload }); \n\nconst rootReducer = (state = DEFAULT_STATE, action) => {\n  switch (action.type) {\n    case TOGGLE_START_STOP_BUTTON:\n      return toggleStartStopButton(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","// creating store\n\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { toggleStartStopButton} from './actionCreators';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentHr: 0,\n      currentMin: 0,\n      currentSec: 0,\n      currentMillisec: 0,\n      intervalId: '',\n      startStopButton: 'Start',\n    };\n  }\n\n  timerButton(){\n    if(this.props.startStopButton === 'Start'){\n      this.props.toggleStartStopButton('Stop')\n      this.startTimer()\n    } else if(this.props.startStopButton === 'Stop'){\n      this.props.toggleStartStopButton('Start')\n      this.stopTimer()\n    }\n  }\n\n  startTimer(){\n    let timerInterval= setInterval(()=>{\n      let ms = this.state.currentMillisec+1;\n      this.setState({\n        currentMillisec: ms});\n      if(this.state.currentMillisec === 100){\n        this.setState({\n          currentMillisec: 0\n        })\n        let sec=this.state.currentSec+1;\n        this.setState({\n          currentSec: sec\n        })\n      }\n      if(this.state.currentSec === 60){\n        this.setState({\n          currentSec: 0\n        })\n        let min=this.state.currentMin+1;\n        this.setState({\n          currentMin: min\n        })\n      }\n      if(this.state.currentMin === 60){\n        this.setState({\n          currentMin: 0\n        })\n        let hr=this.state.currentHr+1;\n        this.setState({\n          currentHr: hr\n        })\n      }\n    },10)\n    this.setState({intervalId: timerInterval,startStopButton: 'Stop'})\n  }\n\n  stopTimer(){\n    clearInterval(this.state.intervalId)\n    let ms = this.state.currentMillisec;\n    this.setState({\n      currentMillisec: ms,\n      startStopButton: 'Start'\n    })\n  }\n\n  resetTimer(){\n    this.setState({\n      currentHr: 0\n    })\n    this.setState({\n      currentMin: 0\n    })\n    this.setState({\n      currentSec: 0\n    })\n    this.setState({\n      currentMillisec: 0\n    })\n    this.setState({\n      startStopButton: 'Start'\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"timer\">\n        <h3>Stopwatch Timer</h3>\n        <TimerDisplay\n        hr={this.state.currentHr}\n        min={this.state.currentMin} \n        sec={this.state.currentSec}\n        milliSec={this.state.currentMillisec} \n        />\n        <button className=\"btn\" onClick={this.timerButton.bind(this)} >{this.state.startStopButton}</button>\n        <button className=\"btn\" onClick={this.resetTimer.bind(this)} >Reset</button>\n      </div>\n    );\n  }\n}\n\nconst TimerDisplay =(props)=> (\n      <div>  \n        <p>\n        <span className=\"hrs\">{props.hr.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})} </span> :  \n        <span className=\"minutes\">{props.min.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})} </span> :\n        <span className=\"seconds\"> {props.sec.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})}</span> :\n        <span className=\"milliseconds\"> {props.milliSec.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})} </span>\n        </p>\n      </div>\n    )\n\nconst mapStateToProps = state => ({\n      currentHr: state.currentHr,\n      currentMin: state.currentMin,\n      currentSec: state.currentSec,\n      currentMillisec: state.currentMillisec,\n      intervalId: state.intervalId,\n      startStopButton: state.startStopButton,\n})\nconst mapDispatchToProps = (dispatch) => ({\n  toggleStartStopButton(label) {\n    dispatch(toggleStartStopButton(label));\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","import { TOGGLE_START_STOP_BUTTON } from './actions';\n\nexport function toggleStartStopButton(label) {\n  return { type: TOGGLE_START_STOP_BUTTON, payload: label};\n}","import React from 'react';\nimport './App.css';\nimport Timer from './Timer';\n\nfunction App() {\n  return (\n    <Timer/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}